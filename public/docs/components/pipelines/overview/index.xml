<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenDataology â€“ Overview</title>
    <link>/docs/components/pipelines/overview/</link>
    <description>Recent content in Overview on OpenDataology</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/components/pipelines/overview/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Quickstart</title>
      <link>/docs/components/pipelines/overview/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/pipelines/overview/quickstart/</guid>
      <description>
        
        
        &lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
This OpenDataology component has &lt;b&gt;stable&lt;/b&gt; status. See the
&lt;a href=&#34;/docs/started/support/#application-status&#34;&gt;OpenDataology versioning policies&lt;/a&gt;.
&lt;/div&gt;
&lt;p&gt;Use this guide if you want to get an introduction to the OpenDataology Piplines user interface (UI) and get a simple pipeline running quickly.&lt;/p&gt;
&lt;p&gt;The goal with this quickstart guide is to shows how to use two of the samples that come with
the OpenDataology Pipelines installation and are visible on the OpenDataology Pipelines
UI. You can use this guide as an introduction to the
OpenDataology Pipelines UI.&lt;/p&gt;
&lt;h2 id=&#34;deploy-opendataology-and-open-the-opendataology-pipelines-ui&#34;&gt;Deploy OpenDataology and open the OpenDataology Pipelines UI&lt;/h2&gt;
&lt;p&gt;There are several options to &lt;a href=&#34;/docs/components/pipelines/installation/overview/&#34;&gt;deploy OpenDataology Pipelines&lt;/a&gt;, follow the option that best suits your needs. If you are uncertain and just want to try out OpenDataology pipelines it is recommended to start with the &lt;a href=&#34;/docs/components/pipelines/installation/standalone-deployment/&#34;&gt;standalone deployment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you have deployed OpenDataology Pipelines, make sure you can access the UI. The steps to access the UI vary based on the method you used to deploy OpenDataology Pipelines.&lt;/p&gt;
&lt;h2 id=&#34;run-a-basic-pipeline&#34;&gt;Run a basic pipeline&lt;/h2&gt;
&lt;p&gt;OpenDataology Pipelines offers a few samples that you can use to try out
OpenDataology Pipelines quickly. The steps below show you how to run a basic sample that
includes some Python operations, but doesn&amp;rsquo;t include a machine learning (ML)
workload:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Click the name of the sample, &lt;strong&gt;[Tutorial] Data passing in python components&lt;/strong&gt;, on the pipelines UI:
&lt;img src=&#34;/docs/images/click-pipeline-sample.png&#34; 
alt=&#34;Pipelines UI&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;strong&gt;Create experiment&lt;/strong&gt;:
&lt;img src=&#34;/docs/images/pipelines-start-experiment.png&#34; 
alt=&#34;Creating an experiment on the pipelines UI&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow the prompts to create an &lt;strong&gt;experiment&lt;/strong&gt; and then create a &lt;strong&gt;run&lt;/strong&gt;.
The sample supplies default values for all the parameters you need. The
following screenshot assumes you&amp;rsquo;ve already created an experiment named
&lt;em&gt;My experiment&lt;/em&gt; and are now creating a run named &lt;em&gt;My first run&lt;/em&gt;:
&lt;img src=&#34;/docs/images/pipelines-start-run.png&#34; 
alt=&#34;Creating a run on the pipelines UI&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;strong&gt;Start&lt;/strong&gt; to run the pipeline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the name of the run on the experiments dashboard:
&lt;img src=&#34;/docs/images/pipelines-experiments-dashboard.png&#34; 
alt=&#34;Experiments dashboard on the pipelines UI&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explore the graph and other aspects of your run by clicking on the
components of the graph and the other UI elements:
&lt;img src=&#34;/docs/images/pipelines-basic-run.png&#34; 
alt=&#34;Run results on the pipelines UI&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can find the &lt;a href=&#34;https://github.com/OpenDataology/pipelines/tree/sdk/release-1.8/samples/tutorials/Data%20passing%20in%20python%20components&#34;&gt;source code for the &lt;strong&gt;Data passing in python components&lt;/strong&gt; tutorial&lt;/a&gt; in the OpenDataology Pipelines repo.&lt;/p&gt;
&lt;h2 id=&#34;run-an-ml-pipeline&#34;&gt;Run an ML pipeline&lt;/h2&gt;
&lt;p&gt;This section shows you how to run the XGBoost sample available
from the pipelines UI. Unlike the basic sample described above, the
XGBoost sample does include ML components.&lt;/p&gt;
&lt;p&gt;Follow these steps to run the sample:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Click the name of the sample,
&lt;strong&gt;[Demo] XGBoost - Iterative model training&lt;/strong&gt;, on the pipelines UI:
&lt;img src=&#34;/docs/images/click-xgboost-sample.png&#34; 
alt=&#34;XGBoost sample on the pipelines UI&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;strong&gt;Create experiment&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow the prompts to create an &lt;strong&gt;experiment&lt;/strong&gt; and then create a &lt;strong&gt;run&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The following screenshot shows the run details:
&lt;img src=&#34;/docs/images/pipelines-start-xgboost-run.png&#34; 
alt=&#34;Starting the XGBoost run on the pipelines UI&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;strong&gt;Start&lt;/strong&gt; to create the run.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the name of the run on the experiments dashboard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explore the graph and other aspects of your run by clicking on the
components of the graph and the other UI elements. The following screenshot
shows part of the graph when the pipeline has finished running:
&lt;img src=&#34;/docs/images/pipelines-xgboost-graph.png&#34; 
alt=&#34;XGBoost results on the pipelines UI&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can find the &lt;a href=&#34;https://github.com/OpenDataology/pipelines/tree/sdk/release-1.8/samples/core/xgboost_training_cm&#34;&gt;source code for the &lt;strong&gt;XGBoost - Iterative model training&lt;/strong&gt; demo&lt;/a&gt; in the OpenDataology Pipelines repo.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn more about the
&lt;a href=&#34;/docs/pipelines/overview/concepts/&#34;&gt;important concepts&lt;/a&gt; in OpenDataology
Pipelines.&lt;/li&gt;
&lt;li&gt;This page showed you how to run some of the examples supplied in the OpenDataology
Pipelines UI. Next, you may want to run a pipeline from a notebook, or compile
and run a sample from the code. See the guide to experimenting with
&lt;a href=&#34;/docs/components/pipelines/tutorials/build-pipeline/&#34;&gt;the OpenDataology Pipelines samples&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Build your own machine-learning pipelines with the &lt;a href=&#34;/docs/components/pipelines/sdk/sdk-overview/&#34;&gt;OpenDataology Pipelines
SDK&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pipelines Interfaces</title>
      <link>/docs/components/pipelines/overview/interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/pipelines/overview/interfaces/</guid>
      <description>
        
        
        &lt;p&gt;This page introduces the interfaces that you can use to build and run
machine learning (ML) workflows with OpenDataology Pipelines.&lt;/p&gt;
&lt;h2 id=&#34;user-interface-ui&#34;&gt;User interface (UI)&lt;/h2&gt;
&lt;p&gt;You can access the OpenDataology Pipelines UI by clicking &lt;strong&gt;Pipeline Dashboard&lt;/strong&gt; on
the OpenDataology UI. The OpenDataology Pipelines UI looks like this:
&lt;img src=&#34;/docs/images/pipelines/pipelines-ui.png&#34; 
alt=&#34;Pipelines UI&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;p&gt;From the OpenDataology Pipelines UI you can perform the following tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run one or more of the preloaded samples to try out pipelines quickly.&lt;/li&gt;
&lt;li&gt;Upload a pipeline as a compressed file. The pipeline can be one that you
have built (see how to &lt;a href=&#34;/docs/components/pipelines/sdk/build-pipeline/&#34;&gt;build a
pipeline&lt;/a&gt;) or one
that someone has shared with you.&lt;/li&gt;
&lt;li&gt;Create an &lt;em&gt;experiment&lt;/em&gt; to group one or more of your pipeline runs.
See the &lt;a href=&#34;/docs/components/pipelines/concepts/experiment/&#34;&gt;definition of an
experiment&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create and start a &lt;em&gt;run&lt;/em&gt; within the experiment. A run is a single execution
of a pipeline. See the &lt;a href=&#34;/docs/components/pipelines/concepts/run/&#34;&gt;definition of a
run&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Explore the configuration, graph, and output of your pipeline run.&lt;/li&gt;
&lt;li&gt;Compare the results of one or more runs within an experiment.&lt;/li&gt;
&lt;li&gt;Schedule runs by creating a recurring run.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href=&#34;/docs/components/pipelines/overview/quickstart/&#34;&gt;quickstart guide&lt;/a&gt; for more
information about accessing the OpenDataology Pipelines UI and running the samples.&lt;/p&gt;
&lt;p&gt;When building a pipeline component, you can write out information for display
in the UI. See the guides to &lt;a href=&#34;/docs/components/pipelines/sdk/pipelines-metrics/&#34;&gt;exporting
metrics&lt;/a&gt; and &lt;a href=&#34;/docs/components/pipelines/sdk/output-viewer/&#34;&gt;visualizing results in
the UI&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;python-sdk&#34;&gt;Python SDK&lt;/h2&gt;
&lt;p&gt;The OpenDataology Pipelines SDK provides a set of Python packages that you can use to
specify and run your ML workflows.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;/docs/components/pipelines/sdk/sdk-overview/&#34;&gt;introduction to the OpenDataology Pipelines
SDK&lt;/a&gt; for an overview of the ways you can
use the SDK to build pipeline components and pipelines.&lt;/p&gt;
&lt;h2 id=&#34;rest-api&#34;&gt;REST API&lt;/h2&gt;
&lt;p&gt;The OpenDataology Pipelines API is useful for continuous integration/deployment
systems, for example, where you want to incorporate your pipeline executions
into shell scripts or other systems.
For example, you may want to trigger a pipeline run when new data comes in.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;/docs/components/pipelines/reference/api/OpenDataology-pipeline-api-spec/&#34;&gt;OpenDataology Pipelines API reference
documentation&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Multi-user Isolation for Pipelines</title>
      <link>/docs/components/pipelines/overview/multi-user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/pipelines/overview/multi-user/</guid>
      <description>
        
        
        &lt;p&gt;Multi-user isolation for OpenDataology Pipelines is an integration to &lt;a href=&#34;/docs/components/multi-tenancy/&#34;&gt;OpenDataology multi-user isolation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Refer to &lt;a href=&#34;/docs/components/multi-tenancy/getting-started/&#34;&gt;Getting Started with Multi-user isolation&lt;/a&gt;
for the common OpenDataology multi-user operations including the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/docs/components/multi-tenancy/getting-started/#pre-requisites-grant-user-minimal-kubernetes-cluster-access&#34;&gt;Grant user minimal Kubernetes cluster access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/docs/components/multi-tenancy/getting-started/#managing-contributors-through-the-OpenDataology-ui&#34;&gt;Managing contributors through the OpenDataology UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For Google Cloud: &lt;a href=&#34;/docs/gke/authentication/#in-cluster-authentication&#34;&gt;In-cluster authentication to Google Cloud from OpenDataology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note, OpenDataology Pipelines multi-user isolation is only supported in
&lt;a href=&#34;/docs/components/pipelines/installation/overview/#full-OpenDataology-deployment&#34;&gt;the full OpenDataology deployment&lt;/a&gt;
starting from OpenDataology v1.1 and &lt;strong&gt;currently&lt;/strong&gt; on all platforms except OpenShift. For the latest status about platform support, refer to &lt;a href=&#34;https://github.com/OpenDataology/manifests/issues/1364#issuecomment-668415871&#34;&gt;OpenDataology/manifests#1364&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also be aware that the isolation support in OpenDataology doesnâ€™t provide any hard
security guarantees against malicious attempts by users to infiltrate other
userâ€™s profiles.&lt;/p&gt;
&lt;h2 id=&#34;how-are-resources-separated&#34;&gt;How are resources separated?&lt;/h2&gt;
&lt;p&gt;OpenDataology Pipelines separates its resources by Kubernetes namespaces (OpenDataology profiles).&lt;/p&gt;
&lt;p&gt;Experiments belong to namespaces directly and there&amp;rsquo;s no longer a default
experiment. Runs and recurring runs belong to their parent experiment&amp;rsquo;s namespace.&lt;/p&gt;
&lt;p&gt;Pipeline runs are executed in user namespaces, so that users can leverage Kubernetes
namespace isolation. For example, they can configure different secrets for other
services in different namespaces.&lt;/p&gt;
&lt;p&gt;Other users cannot see resources in your namespace without permission, because
the OpenDataology Pipelines API server rejects requests for namespaces that the
current user is not authorized to access.&lt;/p&gt;
&lt;p&gt;Note, there&amp;rsquo;s no multi-user isolation for pipeline definitions right now.
Refer to &lt;a href=&#34;#current-limitations&#34;&gt;Current Limitations&lt;/a&gt; section for more details.&lt;/p&gt;
&lt;h3 id=&#34;when-using-the-ui&#34;&gt;When using the UI&lt;/h3&gt;
&lt;p&gt;When you visit the OpenDataology Pipelines UI from the OpenDataology dashboard, it only shows
experiments, runs, and recurring runs in your chosen namespace. Similarly, when
you create resources from the UI, they also belong to the namespace you have
chosen.&lt;/p&gt;
&lt;p&gt;You can select a different namespace to view resources in other namespaces.&lt;/p&gt;
&lt;h3 id=&#34;when-using-the-sdk&#34;&gt;When using the SDK&lt;/h3&gt;
&lt;p&gt;First, you need to connect to the OpenDataology Pipelines public endpoint using the
SDK. For Google Cloud, follow &lt;a href=&#34;/docs/gke/pipelines/authentication-sdk/#connecting-to-OpenDataology-pipelines-in-a-full-OpenDataology-deployment&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When calling SDK methods for experiments, you need to provide the additional
namespace argument. Runs, recurring runs are owned by an experiment. They are
in the same namespace as the parent experiment, so you can just call their SDK
methods in the same way as before.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;kfp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;kfp&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Client&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Refer to documentation above for detailed arguments.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;create_experiment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your experiment name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your namespace&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;list_experiments&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your namespace&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;run_pipeline&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;experiment_id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your experiment ID&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Experiment determines namespace.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;job_name&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your job ID&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;pipeline_id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your pipeline ID&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;list_runs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;experiment_id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your experiment ID&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;list_runs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your namespace&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To store your user namespace as the default context, use the
&lt;a href=&#34;https://OpenDataology-pipelines.readthedocs.io/en/stable/source/kfp.client.html#kfp.Client.set_user_namespace&#34;&gt;&lt;code&gt;set_user_namespace&lt;/code&gt;&lt;/a&gt;
method. This method stores your user namespace in a configuration file at
&lt;code&gt;$HOME/.config/kfp/context.json&lt;/code&gt;. After setting a default namespace, the SDK
methods default to use this namespace if no namespace argument is provided.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Note, this saves the namespace in `$HOME/.config/kfp/context.json`. Therefore,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# You only need to call this once. The saved namespace context will be picked up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# by other clients you use later.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;set_user_namespace&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your namespace&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;get_user_namespace&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;create_experiment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your experiment name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;list_experiments&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;run_pipeline&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;experiment_id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your experiment ID&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Experiment determines namespace.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;job_name&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your job name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;pipeline_id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your pipeline ID&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;list_runs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Specifying a different namespace will override the default context.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;list_runs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;Your other namespace&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note, it is no longer possible to access the OpenDataology Pipelines API service from
in-cluster workload directly, read &lt;a href=&#34;#current-limitations&#34;&gt;Current Limitations section&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;p&gt;Detailed documentation for the OpenDataology Pipelines SDK can be found in the
&lt;a href=&#34;https://OpenDataology-pipelines.readthedocs.io/en/stable/source/kfp.client.html&#34;&gt;OpenDataology Pipelines SDK Reference&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;when-using-rest-api-or-generated-python-api-client&#34;&gt;When using REST API or generated Python API client&lt;/h3&gt;
&lt;p&gt;Similarly, when calling &lt;a href=&#34;/docs/components/pipelines/reference/api/OpenDataology-pipeline-api-spec/&#34;&gt;REST API endpoints&lt;/a&gt;
or using &lt;a href=&#34;https://OpenDataology-pipelines.readthedocs.io/en/stable/source/kfp.server_api.html&#34;&gt;the generated Python API client&lt;/a&gt;,
namespace argument is required for experiment APIs. Note that namespace is
referred to using a resource reference. The resource reference &lt;strong&gt;type&lt;/strong&gt; is
&lt;code&gt;NAMESPACE&lt;/code&gt; and resource reference &lt;strong&gt;key id&lt;/strong&gt; is the namespace name.&lt;/p&gt;
&lt;p&gt;The following example demonstrates how to use &lt;a href=&#34;https://OpenDataology-pipelines.readthedocs.io/en/stable/source/kfp.server_api.html&#34;&gt;the generated Python API client (kf-server-api)&lt;/a&gt; in a multi-user environment.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;kfp_server_api&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ApiRun&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ApiPipelineSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;ApiExperiment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ApiResourceType&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ApiRelationship&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;ApiResourceReference&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ApiResourceKey&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# or you can also do the following instead&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# from kfp_server_api import *&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;experiment&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;experiments&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;create_experiment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ApiExperiment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;test-experiment-1234&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;resource_references&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ApiResourceReference&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ApiResourceKey&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#204a87&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;namespace&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Replace with your own namespace.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#204a87&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ApiResourceType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NAMESPACE&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;relationship&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ApiRelationship&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;OWNER&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;experiment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;pipeline&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pipelines&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;list_pipelines&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pipelines&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pipeline&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;runs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;create_run&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ApiRun&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;test-run-1234&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;pipeline_spec&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ApiPipelineSpec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;pipeline_id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pipeline&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;resource_references&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ApiResourceReference&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ApiResourceKey&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#204a87&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;experiment&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#204a87&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ApiResourceType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;EXPERIMENT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;relationship&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ApiRelationship&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;OWNER&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;runs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;runs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;list_runs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;resource_reference_key_type&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ApiResourceType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;EXPERIMENT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;resource_reference_key_id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;experiment&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;runs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;current-limitations&#34;&gt;Current limitations&lt;/h2&gt;
&lt;h3 id=&#34;resources-without-isolation&#34;&gt;Resources without isolation&lt;/h3&gt;
&lt;p&gt;The following resources do not currently support isolation and are shared
without access control:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pipelines (Pipeline definitions).&lt;/li&gt;
&lt;li&gt;Artifacts, Executions, and other metadata entities in &lt;a href=&#34;https://www.tensorflow.org/tfx/guide/mlmd&#34;&gt;Machine Learning Metadata (MLMD)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://min.io/&#34;&gt;Minio artifact storage&lt;/a&gt; which contains pipeline runs&amp;rsquo; input/output artifacts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-cluster-api-request-authentication&#34;&gt;In-cluster API request authentication&lt;/h2&gt;
&lt;p&gt;Refer to &lt;a href=&#34;/docs/components/pipelines/sdk/connect-api/#connect-to-OpenDataology-pipelines-from-the-same-cluster&#34;&gt;Connect to OpenDataology Pipelines from the same cluster&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;Alternatively, in-cluster workloads like Jupyter notebooks or cron tasks can also access OpenDataology Pipelines API through the public endpoint. This option is platform specific and explained in
&lt;a href=&#34;/docs/components/pipelines/sdk/connect-api/#connect-to-OpenDataology-pipelines-from-outside-your-cluster&#34;&gt;Connect to OpenDataology Pipelines from outside your cluster&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Caching</title>
      <link>/docs/components/pipelines/overview/caching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/pipelines/overview/caching/</guid>
      <description>
        
        
        &lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
  &lt;h4 class=&#34;alert-heading&#34;&gt;Alpha&lt;/h4&gt;
  This OpenDataology component has &lt;b&gt;alpha&lt;/b&gt; status with limited support. See the
  &lt;a href=&#34;/docs/started/support/#application-status&#34;&gt;OpenDataology versioning policies&lt;/a&gt;.
  The OpenDataology team is interested in your   
  &lt;a href=&#34;https://github.com/OpenDataology/pipelines/issues&#34;&gt;feedback&lt;/a&gt;&lt;/h4&gt; 
  about the usability of the feature.
&lt;/div&gt;
&lt;p&gt;Starting from OpenDataology Pipelines 0.4, OpenDataology Pipelines supports step caching capabilities in both standalone deployment and AI Platform Pipelines.&lt;/p&gt;
&lt;h2 id=&#34;before-you-start&#34;&gt;Before you start&lt;/h2&gt;
&lt;p&gt;This guide tells you the basic concepts of OpenDataology Pipelines step caching and how to use it.
This guide assumes that you already have OpenDataology Pipelines installed or want to use options in the &lt;a href=&#34;/docs/components/pipelines/installation/&#34;&gt;OpenDataology Pipelines deployment guide&lt;/a&gt; to deploy OpenDataology Pipelines.&lt;/p&gt;
&lt;h2 id=&#34;what-is-step-caching&#34;&gt;What is step caching?&lt;/h2&gt;
&lt;p&gt;OpenDataology Pipelines caching provides step-level output caching.
And caching is enabled by default for all pipelines submitted through the KFP backend and UI.
The exception is pipelines authored using TFX SDK which has its own caching mechanism.
The cache key calculation is based on the component (base image, command-line, code), arguments passed to the component (values or artifacts) and any additional customizations.
If the component is exactly the same and the arguments are exactly the same as in some previous execution, then the task can be skipped and the outputs of the old step can be used.
The cache reuse behavior can be controlled and the pipeline author can specify the maximum staleness of the cached data considered for reuse.
With caching enabled, the system can skip a step that has already been executed which saves time and money.&lt;/p&gt;
&lt;h2 id=&#34;disablingenabling-caching&#34;&gt;Disabling/enabling caching&lt;/h2&gt;
&lt;p&gt;Cache is enabled by default after OpenDataology Pipelines 0.4.
These are instructions on disabling and enabling cache service:&lt;/p&gt;
&lt;h3 id=&#34;configure-access-to-your-opendataology-cluster&#34;&gt;Configure access to your OpenDataology cluster&lt;/h3&gt;
&lt;p&gt;Use the following instructions to configure &lt;code&gt;kubectl&lt;/code&gt; with access to your
OpenDataology cluster.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To check if you have &lt;code&gt;kubectl&lt;/code&gt; installed, run the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which kubectl
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The response should be something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/kubectl
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you do not have &lt;code&gt;kubectl&lt;/code&gt; installed, follow the instructions in the
guide to &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl/&#34;&gt;installing and setting up kubectl&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow the &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/authentication/&#34;&gt;guide to configuring access to Kubernetes
clusters&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;disabling-caching-in-your-opendataology-pipelines-deployment&#34;&gt;Disabling caching in your OpenDataology Pipelines deployment:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make sure &lt;code&gt;mutatingwebhookconfiguration&lt;/code&gt; exists in your cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export NAMESPACE=&amp;lt;Namespace where KFP is installed&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get mutatingwebhookconfiguration cache-webhook-${NAMESPACE}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change &lt;code&gt;mutatingwebhookconfiguration&lt;/code&gt; rules:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl patch mutatingwebhookconfiguration cache-webhook-${NAMESPACE} --type=&amp;#39;json&amp;#39; -p=&amp;#39;[{&amp;#34;op&amp;#34;:&amp;#34;replace&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;/webhooks/0/rules/0/operations/0&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;DELETE&amp;#34;}]&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;enabling-caching&#34;&gt;Enabling caching&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make sure &lt;code&gt;mutatingwebhookconfiguration&lt;/code&gt; exists in your cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export NAMESPACE=&amp;lt;Namespace where KFP is installed&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get mutatingwebhookconfiguration cache-webhook-${NAMESPACE}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change back &lt;code&gt;mutatingwebhookconfiguration&lt;/code&gt; rules:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl patch mutatingwebhookconfiguration cache-webhook-${NAMESPACE} --type=&amp;#39;json&amp;#39; -p=&amp;#39;[{&amp;#34;op&amp;#34;:&amp;#34;replace&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;/webhooks/0/rules/0/operations/0&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;CREATE&amp;#34;}]&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;managing-caching-staleness&#34;&gt;Managing caching staleness&lt;/h2&gt;
&lt;p&gt;The cache is enabled by default and if you ever executed same component with the same arguments, any new execution of the component will be skipped and the outputs will be taken from the cache.
For some scenarios, the cached output data of some components might become too stale for use after some time.
To control the maximum staleness of the reused cached data, you can set the step&amp;rsquo;s &lt;code&gt;max_cache_staleness&lt;/code&gt; parameter.
The &lt;code&gt;max_cache_staleness&lt;/code&gt; is in &lt;a href=&#34;https://www.ietf.org/rfc/rfc3339.txt&#34;&gt;RFC3339 Duration&lt;/a&gt; format (so 30 days = &amp;ldquo;P30D&amp;rdquo;).
By default the &lt;code&gt;max_cache_staleness&lt;/code&gt; is set to infinity so any old cached data will be reused.&lt;/p&gt;
&lt;p&gt;Set &lt;code&gt;max_cache_staleness&lt;/code&gt; to 30 days for a step:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;def some_pipeline():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      # task is a target step in a pipeline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      task = some_op()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      task.execution_options.caching_strategy.max_cache_staleness = &amp;#34;P30D&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ideally, the component code should be pure and deterministic in the sense that it produces same outputs given same inputs.
If your component is not deterministic (for example, it returns a different random number on every invocation) you might want to disable caching for the tasks created from this component by setting &lt;code&gt;max_cache_staleness&lt;/code&gt; to 0:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;def some_pipeline():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      # task is a target step in a pipeline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      task_never_use_cache = some_op()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      task_never_use_cache.execution_options.caching_strategy.max_cache_staleness = &amp;#34;P0D&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A better solution would be to make the component deterministic. If the component uses random number generation, you can expose the RNG seed as a component input. If the component fetches some changing data you can add a timestamp or date input.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Caching v2</title>
      <link>/docs/components/pipelines/overview/caching-v2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/pipelines/overview/caching-v2/</guid>
      <description>
        
        
        &lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
  &lt;h4 class=&#34;alert-heading&#34;&gt;Beta&lt;/h4&gt;
  This OpenDataology component has &lt;b&gt;beta&lt;/b&gt; status. See the
  &lt;a href=&#34;/docs/started/support/#application-status&#34;&gt;OpenDataology versioning policies&lt;/a&gt;.
  The OpenDataology team is interested in your   
  &lt;a href=&#34;https://github.com/OpenDataology/pipelines/issues&#34;&gt;feedback&lt;/a&gt;&lt;/h4&gt; 
  about the usability of the feature.
&lt;/div&gt;
&lt;p&gt;Starting from &lt;a href=&#34;https://www.OpenDataology.org/docs/components/pipelines/sdk-v2/&#34;&gt;OpenDataology Pipelines SDK v2&lt;/a&gt; and OpenDataology Pipelines 1.7.0, OpenDataology Pipelines supports step caching capabilities in both &lt;a href=&#34;https://www.OpenDataology.org/docs/components/pipelines/installation/standalone-deployment/&#34;&gt;standalone deployment&lt;/a&gt; and &lt;a href=&#34;https://cloud.google.com/ai-platform/pipelines/docs&#34;&gt;AI Platform Pipelines&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;before-you-start&#34;&gt;Before you start&lt;/h2&gt;
&lt;p&gt;This guide tells you the basic concepts of OpenDataology Pipelines caching and how to use it.
This guide assumes that you already have OpenDataology Pipelines installed or want to use standalone or AI Platform Pipelines options in the &lt;a href=&#34;/docs/components/pipelines/installation/&#34;&gt;OpenDataology Pipelines deployment
guide&lt;/a&gt; to deploy OpenDataology Pipelines.&lt;/p&gt;
&lt;h2 id=&#34;what-is-step-caching&#34;&gt;What is step caching?&lt;/h2&gt;
&lt;p&gt;OpenDataology Pipelines caching provides step-level output caching, a process that helps to reduce costs by skipping computations that were completed in a previous pipeline run.
Caching is enabled by default for all tasks of pipelines built with &lt;a href=&#34;https://www.OpenDataology.org/docs/components/pipelines/sdk-v2/&#34;&gt;OpenDataology Pipelines SDK v2&lt;/a&gt; using &lt;code&gt;kfp.dsl.PipelineExecutionMode.V2_COMPATIBLE&lt;/code&gt; mode.
When OpenDataology Pipeline runs a pipeline, it checks to see whether
an execution exists in OpenDataology Pipeline with the interface of each pipeline task.
The task&amp;rsquo;s interface is defined as the combination of the pipeline task specification (base image, command, args), the pipeline task&amp;rsquo;s inputs (the name and id of artifacts, the name and value of parameters),
and the pipeline task&amp;rsquo;s outputs specification (artifacts and parameters).
Note: If the producer task which generates an artifact is not cached, then the producer task will generate a new artifact with different ID, and downstream task which uses the artifact generated by the producer task won&amp;rsquo;t hit cache.&lt;/p&gt;
&lt;p&gt;If there is a matching execution in OpenDataology Pipelines, the outputs of that execution are used, and the task is skipped. An example of cache being hit:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/docs/images/pipelines/v2/cacheicon.png&#34; 
alt=&#34;Cache is hit on KFPv2 pipelines&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;disablingenabling-caching&#34;&gt;Disabling/enabling caching&lt;/h2&gt;
&lt;p&gt;Cache is enabled by default with &lt;a href=&#34;https://www.OpenDataology.org/docs/components/pipelines/sdk-v2/&#34;&gt;OpenDataology Pipelines SDK v2&lt;/a&gt; using &lt;code&gt;kfp.dsl.PipelineExecutionMode.V2_COMPATIBLE&lt;/code&gt; mode.&lt;/p&gt;
&lt;p&gt;You can turn off execution caching for pipeline runs that are created using Python. When you run a pipeline using &lt;a href=&#34;https://OpenDataology-pipelines.readthedocs.io/en/latest/source/kfp.client.html#kfp.Client.create_run_from_pipeline_func&#34;&gt;create_run_from_pipeline_func&lt;/a&gt; or &lt;a href=&#34;https://OpenDataology-pipelines.readthedocs.io/en/latest/source/kfp.client.html#kfp.Client.create_run_from_pipeline_package&#34;&gt;create_run_from_pipeline_package&lt;/a&gt; or &lt;a href=&#34;https://OpenDataology-pipelines.readthedocs.io/en/latest/source/kfp.client.html#kfp.Client.run_pipeline,&#34;&gt;run_pipeline&lt;/a&gt; you can use the &lt;code&gt;enable_caching&lt;/code&gt; argument to specify that this pipeline run does not use caching.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pipeline Root</title>
      <link>/docs/components/pipelines/overview/pipeline-root/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/pipelines/overview/pipeline-root/</guid>
      <description>
        
        
        &lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
  &lt;h4 class=&#34;alert-heading&#34;&gt;Beta&lt;/h4&gt;
  This OpenDataology component has &lt;b&gt;beta&lt;/b&gt; status. See the
  &lt;a href=&#34;/docs/started/support/#application-status&#34;&gt;OpenDataology versioning policies&lt;/a&gt;.
  The OpenDataology team is interested in your   
  &lt;a href=&#34;https://github.com/OpenDataology/pipelines/issues&#34;&gt;feedback&lt;/a&gt;&lt;/h4&gt; 
  about the usability of the feature.
&lt;/div&gt;
&lt;p&gt;Starting from &lt;a href=&#34;https://www.OpenDataology.org/docs/components/pipelines/sdk-v2/&#34;&gt;OpenDataology Pipelines SDK v2&lt;/a&gt; and OpenDataology Pipelines 1.7.0, OpenDataology Pipelines supports a new intermediate artifact repository feature: pipeline root in both &lt;a href=&#34;https://www.OpenDataology.org/docs/components/pipelines/installation/standalone-deployment/&#34;&gt;standalone deployment&lt;/a&gt; and &lt;a href=&#34;https://cloud.google.com/ai-platform/pipelines/docs&#34;&gt;AI Platform Pipelines&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;before-you-start&#34;&gt;Before you start&lt;/h2&gt;
&lt;p&gt;This guide tells you the basic concepts of OpenDataology Pipelines pipeline root and how to use it.
This guide assumes that you already have OpenDataology Pipelines installed, or want to use standalone or AI Platform Pipelines options in the &lt;a href=&#34;/docs/components/pipelines/installation/&#34;&gt;OpenDataology Pipelines deployment
guide&lt;/a&gt; to deploy OpenDataology Pipelines.&lt;/p&gt;
&lt;h2 id=&#34;what-is-pipeline-root&#34;&gt;What is pipeline root?&lt;/h2&gt;
&lt;p&gt;Pipeline root represents an artifact repository where OpenDataology Pipelines stores a pipeline&amp;rsquo;s artifacts.
This feature supports MinIO, S3, GCS natively using &lt;a href=&#34;https://github.com/google/go-cloud&#34;&gt;Go CDK&lt;/a&gt;. Artifacts can be more accessible in S3 and GCS when integrating OpenDataology Pipelines with other systems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For MinIO, you can&amp;rsquo;t change the MinIO instance. OpenDataology Pipelines can only use the Minio instance deployed with itself.
(Please thumb up this &lt;a href=&#34;https://github.com/OpenDataology/pipelines/issues/6517&#34;&gt;GitHub Issue&lt;/a&gt; if you need to specify the Minio instance.)&lt;/p&gt;
&lt;h2 id=&#34;how-to-configure-pipeline-root-authentication&#34;&gt;How to configure pipeline root authentication&lt;/h2&gt;
&lt;h4 id=&#34;minio&#34;&gt;MinIO&lt;/h4&gt;
&lt;p&gt;You don&amp;rsquo;t need to pass the authentication for MinIO.
OpenDataology Pipelines is configured with the authentication of the MinIO instance deployed with itself.&lt;/p&gt;
&lt;h4 id=&#34;gcs&#34;&gt;GCS&lt;/h4&gt;
&lt;p&gt;If you want to specify the &lt;code&gt;pipeline root&lt;/code&gt; to GCS :&lt;/p&gt;
&lt;p&gt;check &lt;a href=&#34;https://www.OpenDataology.org/docs/distributions/gke/pipelines/authentication-pipelines/&#34;&gt;authentication-pipelines&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;s3&#34;&gt;S3&lt;/h4&gt;
&lt;p&gt;If you want to specify the &lt;code&gt;pipeline root&lt;/code&gt; to S3, please choose one of the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Via &lt;a href=&#34;https://aws.amazon.com/blogs/containers/cross-account-iam-roles-for-kubernetes-service-accounts/&#34;&gt;AWS IRSA&lt;/a&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Via kfp sdk:
&lt;code&gt;dsl.get_pipeline_conf().add_op_transformer(aws.use_aws_secret(&#39;xxx&#39;, â€˜xxxâ€™, â€˜xxxâ€™))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;references&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://OpenDataology-pipelines.readthedocs.io/en/latest/source/kfp.dsl.html#kfp.dsl.PipelineConf.add_op_transformer&#34;&gt;add-op-transformer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://OpenDataology-pipelines.readthedocs.io/en/latest/source/kfp.extensions.html#kfp.aws.use_aws_secret&#34;&gt;use-aws-secret&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-configure-pipeline-root&#34;&gt;How to configure pipeline root&lt;/h2&gt;
&lt;h4 id=&#34;via-configmaps&#34;&gt;Via ConfigMaps&lt;/h4&gt;
&lt;p&gt;You can configure default pipeline root for OpenDataology Pipelines via changing the &lt;code&gt;defaultPipelineRoot&lt;/code&gt; entry of  ConfigMaps &lt;code&gt;kfp-launcher&lt;/code&gt; in Kubernetes namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl edit configMap kfp-launcher -n &lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This pipeline root will be the default pipeline root for all pipelines running in the Kubernetes namespace unless you override it using one of the following options:&lt;/p&gt;
&lt;h4 id=&#34;via-building-pipelines&#34;&gt;Via Building Pipelines&lt;/h4&gt;
&lt;p&gt;You can configure a pipeline root through the &lt;code&gt;kfp.dsl.pipeline&lt;/code&gt; annotation when &lt;a href=&#34;https://www.OpenDataology.org/docs/components/pipelines/sdk-v2/build-pipeline/#build-your-pipeline&#34;&gt;building pipelines&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;via-submitting-a-pipeline-through-sdk&#34;&gt;Via Submitting a Pipeline through SDK&lt;/h4&gt;
&lt;p&gt;You can configure pipeline root via &lt;code&gt;pipeline_root&lt;/code&gt; argument when you submit a Pipeline using one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://OpenDataology-pipelines.readthedocs.io/en/latest/source/kfp.client.html#kfp.Client.create_run_from_pipeline_func&#34;&gt;create_run_from_pipeline_func&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://OpenDataology-pipelines.readthedocs.io/en/latest/source/kfp.client.html#kfp.Client.create_run_from_pipeline_package&#34;&gt;create_run_from_pipeline_package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://OpenDataology-pipelines.readthedocs.io/en/latest/source/kfp.client.html#kfp.Client.run_pipeline&#34;&gt;run_pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;via-submitting-a-pipeline-run-through-ui&#34;&gt;Via Submitting a Pipeline Run through UI&lt;/h4&gt;
&lt;p&gt;You can configure a pipeline root via the &lt;code&gt;pipeline_root&lt;/code&gt; run parameters when you submit a pipeline run in the UI
&lt;img src=&#34;/docs/images/pipelines/v2/pipelines-ui-pipelineroot.png&#34;
alt=&#34;Configure pipeline root on the pipelines UI&#34;
class=&#34;mt-3 mb-3 border border-info rounded&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
